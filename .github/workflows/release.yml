name: Release Template

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  MINIMUM_VERSION: 0.1.0

jobs:
  Release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Run 'commit-and-tag-version'
        id: commit-and-tag-version
        shell: pwsh
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com

          $TempFilePath = "version-tempfile-for-ci-output.txt"
          New-Item -ItemType File -Path $TempFilePath | Out-Null
          $LatestTag = git tag -l "v*" --sort "-v:refname" | Select-Object -First 1
          if ($null -eq $LatestTag) {
            Write-Host "No existing tags found. Will release with minimum version '$env:MINIMUM_VERSION'."
            npx --yes commit-and-tag-version --release-as $env:MINIMUM_VERSION
          } else {
            $LatestVersion = $LatestTag.Substring(1)
            if ([System.Version]$LatestVersion -ge [System.Version]$env:MINIMUM_VERSION) {
              Write-Host "Latest version from tags is '$LatestVersion', which is greater than or equal to minimum version '$env:MINIMUM_VERSION'. New version will be automatically calculated."
              npx --yes commit-and-tag-version
            } else {
              Write-Host "Latest version from tags is '$LatestVersion', which is less than minimum version '$env:MINIMUM_VERSION'. Minimum version will be forced."
              npx --yes commit-and-tag-version --release-as $env:MINIMUM_VERSION
            }
          }
          $VersionOutput = "newversion=$(Get-Content -Path $TempFilePath)"
          Out-File -InputObject $VersionOutput -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          Remove-Item -Path $TempFilePath
      - name: Update Changelog
        id: changelog
        uses: natescherer/changelog-management-action@v1
        with:
          mode: release
          releaseVersion: ${{ steps.commit-and-tag-version.outputs.newVersion }}
      - run: Remove-Item -Path template/template_copy.zip
        shell: pwsh
        name: Remove Old template_copy.zip
      - name: Create Template Zip
        uses: thedoctor0/zip-release@0.7.6
        with:
          filename: template/template_copy.zip
          path: template
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        id: cpr
        with:
          base: main
          commit-message: "chore: release v${{ steps.commit-and-tag-version.outputs.newVersion }}"
          branch: release/v${{ steps.commit-and-tag-version.outputs.newVersion }}
          title: "chore: release v${{ steps.commit-and-tag-version.outputs.newVersion }}"
          body: ${{ steps.changelog.outputs.releasenotes }}
      - run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com
          git checkout release/v${{ steps.commit-and-tag-version.outputs.newVersion }}
          git tag v${{ steps.commit-and-tag-version.outputs.newVersion }}
          git push origin v${{ steps.commit-and-tag-version.outputs.newVersion }}
        name: Add Version Tag
      - name: Enable Pull Request Automerge
        run: gh pr merge --merge --auto "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ steps.commit-and-tag-version.outputs.newVersion }}
          files: out
          tag_name: v${{ steps.commit-and-tag-version.outputs.newVersion }}
          body: ${{ steps.changelog.outputs.releasenotes }}